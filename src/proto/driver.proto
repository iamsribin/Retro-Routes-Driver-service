syntax = "proto3";
package driver_package;

service Driver {
    rpc CheckLoginDriver(CheckLoginDriverReq) returns (CheckLoginDriverRes) {}
    rpc CheckGoogleLoginDriver(CheckGoogleLoginDriverReq) returns (CheckLoginDriverRes) {}
    rpc GetResubmissionDocuments(GetResubmissionDocumentsReq) returns (GetResubmissionDocumentsRes) {}
    rpc postResubmissionDocuments(postResubmissionDocumentsReq) returns (CommonRes) {}
}

message postResubmissionDocumentsReq{
  string driverId = 1;
  string model = 2;
  string insuranceStartDate = 3;
  string insuranceExpiryDate = 4;
  string pollutionStartDate = 5;
  string pollutionExpiryDate = 6;
  string aadharID = 7;
  string licenseID = 8;
  string licenseValidity = 9;
  string carFrontImage = 10;
  string insuranceImage = 11;
  string carBackImage = 12;
  string rcBackImage = 13;
  string pollutionImage = 14;
  string rcFrontImage = 15;
  string driverImage = 16;
  string aadharBackImage = 17;
  string licenseFrontImage = 18;
  string aadharFrontImage = 19;
  string licenseBackImage = 20;
  string registrationId = 21;
  string latitude = 22;
  string longitude = 23;
}

message CommonRes{
  StatusCode status = 1;
  string message = 2;
  string id = 3;
  string navigate = 4;
}

message CheckLoginDriverReq{
 string mobile = 1;
}

message CheckLoginDriverRes{
    string status = 1;
    string message = 2;
    string navigate = 3;
    string name = 4;
    string refreshToken =5;
    string token = 6;
    string driverId = 7;
}

message CheckGoogleLoginDriverReq{
   string email = 1;
}

message GetResubmissionDocumentsReq{
string id =1;
}

message GetResubmissionDocumentsRes {
  StatusCode status = 1;
  string message = 2;
  string navigate = 3; 
  Resubmission data = 4;
}

message Resubmission {
  string driverId = 1;
  repeated FieldType fields = 2;
}

//============enum===============
enum FieldType {
  RC = 0;
  MODEL = 1;
  REGISTRATION_ID = 2;
  CAR_IMAGE = 3;
  INSURANCE = 4;
  POLLUTION = 5;
  LOCATION = 6;
  LICENSE = 7;
  AADHAR = 8;
  DRIVER_IMAGE = 9;
}


enum StatusCode {
  // Informational responses (100–199)
  Continue = 100;
  SwitchingProtocols = 101;
  Processing = 102;
  EarlyHints = 103;

  // Successful responses (200–299)
  OK = 200;
  Created = 201;
  Accepted = 202;
  NonAuthoritativeInformation = 203;
  NoContent = 204;
  ResetContent = 205;
  PartialContent = 206;
  MultiStatus = 207;
  AlreadyReported = 208;
  IMUsed = 226;

  // Redirection messages (300–399)
  MultipleChoices = 300;
  MovedPermanently = 301;
  Found = 302;
  SeeOther = 303;
  NotModified = 304;
  UseProxy = 305;
  TemporaryRedirect = 307;
  PermanentRedirect = 308;

  // Client error responses (400–499)
  BadRequest = 400;
  Unauthorized = 401;
  PaymentRequired = 402;
  Forbidden = 403;
  NotFound = 404;
  MethodNotAllowed = 405;
  NotAcceptable = 406;
  ProxyAuthenticationRequired = 407;
  RequestTimeout = 408;
  Conflict = 409;
  Gone = 410;
  LengthRequired = 411;
  PreconditionFailed = 412;
  PayloadTooLarge = 413;
  URITooLong = 414;
  UnsupportedMediaType = 415;
  RangeNotSatisfiable = 416;
  ExpectationFailed = 417;
  ImATeapot = 418;
  MisdirectedRequest = 421;
  UnprocessableEntity = 422;
  Locked = 423;
  FailedDependency = 424;
  TooEarly = 425;
  UpgradeRequired = 426;
  PreconditionRequired = 428;
  TooManyRequests = 429;
  RequestHeaderFieldsTooLarge = 431;
  UnavailableForLegalReasons = 451;

  // Server error responses (500–599)
  InternalServerError = 500;
  NotImplemented = 501;
  BadGateway = 502;
  ServiceUnavailable = 503;
  GatewayTimeout = 504;
  HTTPVersionNotSupported = 505;
  VariantAlsoNegotiates = 506;
  InsufficientStorage = 507;
  LoopDetected = 508;
  NotExtended = 510;
  NetworkAuthenticationRequired = 511;

  // Custom application-specific code
  payment_status_paid = 1000; // Note: string enums like `'paid'` must be converted to a valid proto enum name and integer
}